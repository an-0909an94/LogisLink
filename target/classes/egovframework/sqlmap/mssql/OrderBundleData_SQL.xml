<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="orderBundleDataNS">

   	<select id="selectCustId" parameterType="java.util.HashMap" resultType="java.util.HashMap">
   		SELECT
   				A.CUST_ID
   			  , A.DEPT_ID
   			  , A.CUST_NAME
   			  , B.DEPT_NAME
   			  , A.MANAGER
   		FROM
   			(
   				SELECT CUST_ID, DEPT_ID, CUST_NAME, MANAGER
   				FROM T_CUST_DTL 
   				WHERE MNG_CUST_ID = #{loginCustId} AND MNG_DEPT_ID = #{loginDeptId}
			   		AND SELL_BUY_SCTN = '01' AND USE_YN = 'Y'
   			) A
   			INNER JOIN
   			T_CUST_DEPT B ON A.DEPT_ID = B.DEPT_ID
   		WHERE
   			A.CUST_NAME + '||' + B.DEPT_NAME IN
			<foreach collection="deptList" item="item" open="(" close=")" separator=",">
				#{item.reqCustName} + '||' + #{item.reqDeptName}
			</foreach>
   	</select>
   	
   	<select id="selectVehicId" parameterType="java.util.HashMap" resultType="java.util.HashMap">
   		SELECT 
   				A.VEHIC_ID
   			  , A.DRIVER_ID
   			  , B.CAR_NUM
   			  , ISNULL(B.CAR_TON_CODE, '') CAR_TON_CODE
   			  , ISNULL(B.CAR_TYPE_CODE, '') CAR_TYPE_CODE
   			  , C.DRIVER_NAME
   			  , C.MOBILE
   		FROM 
   			(
   				SELECT VEHIC_ID, DRIVER_ID 
   				FROM T_CUST_VEHIC 
   				WHERE CUST_ID = #{loginCustId} AND DEPT_ID = #{loginDeptId} AND USE_YN = 'Y' 
   			) A
   			INNER JOIN
   			T_VEHIC_MST B ON A.VEHIC_ID = B.VEHIC_ID AND A.DRIVER_ID = B.DRIVER_ID AND B.USE_YN = 'Y'
   			INNER JOIN
   			T_DRIVER C ON A.DRIVER_ID = C.DRIVER_ID
   		WHERE
   			B.CAR_NUM + '||' + C.MOBILE + '||' + C.DRIVER_NAME IN
   			<foreach collection="vehicList" item="item" open="(" close=")" separator=",">
   				#{item.carNum} + '||' + REPLACE(#{item.driverTel},'-','') + '||' + #{item.driverName}
   			</foreach>
   	</select>
   
	<insert id="insertOrder" parameterType="java.util.HashMap">
		INSERT INTO
				T_ORDER 
				(
					ORDER_ID			  , REQ_CUST_ID			  , REQ_DEPT_ID			  , REQ_STAFF_ID				  , REQ_TEL
				  , CUST_ID				  , DEPT_ID				  , S_COM_NAME			  , S_SIDO						  , S_GUNGU
				  , S_DONG				  , S_ADDR				  , S_ADDR_DETAIL		  , S_DATE						  , S_STAFF
				  , S_TEL				  , E_COM_NAME			  , E_SIDO				  , E_GUNGU						  , E_DONG
				  , E_ADDR				  , E_ADDR_DETAIL		  , E_DATE				  , E_STAFF						  , E_TEL
				  , S_LAT				  , S_LON				  , E_LAT				  , E_LON						  , ORDER_STATE
				  , GOODS_NAME			  , GOODS_WEIGHT		  , S_WAY_CODE			  , E_WAY_CODE					  , MIX_YN
				  , MIX_SIZE			  , RETURN_YN			  , IN_OUT_SCTN			  , TRUCK_TYPE_CODE				  , CAR_TON_CODE
				  , CAR_TYPE_CODE		  , DISTANCE			  , TIME				  , REGID						  , REGDATE
				  , WEIGHT_UNIT_CODE	  , CHARGE_TYPE			  , ALLOC_DATE
				)
		VALUES
		<foreach collection="orderList" item="item" index="index" separator=",">
				(
				  	#{item.orderId, jdbcType=NVARCHAR}
				  , #{item.reqCustId, jdbcType=NVARCHAR}
				  , #{item.reqDeptId, jdbcType=NVARCHAR}
				  , #{item.reqStaffId, jdbcType=NVARCHAR}
				  , #{item.reqTel, jdbcType=NVARCHAR}
				  , #{loginCustId, jdbcType=NVARCHAR}
				  , #{loginDeptId, jdbcType=NVARCHAR}
				  , #{item.sComName, jdbcType=NVARCHAR}
				  , #{item.sSido, jdbcType=NVARCHAR}
				  , #{item.sGungu, jdbcType=NVARCHAR}
				  , #{item.sDong, jdbcType=NVARCHAR}
				  , #{item.sAddr, jdbcType=NVARCHAR}
				  , #{item.sAddrDetail, jdbcType=NVARCHAR}
				  , #{item.sDate, jdbcType=NVARCHAR}
				  , #{item.sStaff, jdbcType=NVARCHAR}
				  , #{item.sTel, jdbcType=NVARCHAR}
				  , #{item.eComName, jdbcType=NVARCHAR}
				  , #{item.eSido, jdbcType=NVARCHAR}
				  , #{item.eGungu, jdbcType=NVARCHAR}
				  , #{item.eDong, jdbcType=NVARCHAR}
				  , #{item.eAddr, jdbcType=NVARCHAR}
				  , #{item.eAddrDetail, jdbcType=NVARCHAR}
				  , #{item.eDate, jdbcType=NVARCHAR}
				  , #{item.eStaff, jdbcType=NVARCHAR}
				  , #{item.eTel, jdbcType=NVARCHAR}
				  , #{item.sLat, jdbcType=NVARCHAR}
				  , #{item.sLon, jdbcType=NVARCHAR}
				  , #{item.eLat, jdbcType=NVARCHAR}
				  , #{item.eLon, jdbcType=NVARCHAR}
				  , CASE WHEN #{item.orderState, jdbcType=NVARCHAR} = '01' THEN '01' ELSE '00' END
				  , #{item.goodsName, jdbcType=NVARCHAR}
				  , CONVERT(float, #{item.goodsWeight, jdbcType=NVARCHAR}) * 1000
				  , (SELECT CODE FROM T_CODE  WHERE GCODE='WAY_TYPE_CD' AND CNAME=#{item.sWayName})
				  , (SELECT CODE FROM T_CODE  WHERE GCODE='WAY_TYPE_CD' AND CNAME=#{item.eWayName})
				  , CASE WHEN #{item.mixYn, jdbcType=NVARCHAR} = 'Y' THEN 'Y' ELSE 'N' END
				  , #{item.mixSize, jdbcType=NVARCHAR}
				  , CASE WHEN #{item.returnYn, jdbcType=NVARCHAR} = 'Y' THEN 'Y' ELSE 'N' END
				  , (SELECT CODE FROM T_CODE  WHERE GCODE='IN_OUT_SCTN' AND CNAME=#{item.inOutSctn})
				  , (SELECT CODE FROM T_CODE  WHERE GCODE='TRUCK_TYPE_CD' AND CNAME=#{item.truckTypeName})
				  , (SELECT CODE FROM T_CODE  WHERE GCODE='CAR_TON_CD' AND CNAME=#{item.carTonName})
				  , (SELECT CODE FROM T_CODE  WHERE GCODE='CAR_TYPE_CD' AND CNAME=#{item.carTypeName})
				  , #{item.distance, jdbcType=NVARCHAR}
				  , #{item.time, jdbcType=NVARCHAR}
				  , #{regId, jdbcType=NVARCHAR}
				  , GETDATE()
				  , 'TON'
				  , '01'
				  , CASE WHEN ISNULL(#{item.allocDate}, '') = '' AND #{item.orderState, jdbcType=NVARCHAR} = '01' THEN GETDATE()
				     WHEN ISNULL(#{item.allocDate}, '') = '' THEN NULL ELSE CAST(#{item.allocDate} AS DATETIME) END
			)		  
		</foreach>		
	</insert>
   	
	<insert id="insertOrderAlloc" parameterType="java.util.HashMap">
		INSERT INTO
				T_ORDER_ALLOC
				(
					ALLOC_ID		, ORDER_ID		, SELL_CUST_ID	,	SELL_DEPT_ID
				  , BUY_CUST_ID		, BUY_DEPT_ID	, BUY_STAFF_ID	,	ALLOC_CHARGE	,	ALLOC_FEE
				  , ALLOC_STATE		, REGDATE		, REGID			, 	ALLOC_DATE
				 )
		VALUES		
		<foreach collection="orderList" item="item" index="index" separator=",">
			(
				 	#{item.allocId, jdbcType=NVARCHAR}
				  , #{item.orderId, jdbcType=NVARCHAR}
				  , #{item.reqCustId, jdbcType=NVARCHAR}
				  , #{item.reqDeptId, jdbcType=NVARCHAR}
				  , #{loginCustId, jdbcType=NVARCHAR}
				  , #{loginDeptId, jdbcType=NVARCHAR}
				  , #{regId, jdbcType=NVARCHAR}
				  , #{item.allocCharge, jdbcType=NVARCHAR}
				  , '0'
				  , '10'
				  , GETDATE()
				  , #{regId, jdbcType=NVARCHAR}
				  , CASE WHEN ISNULL(#{item.allocDate}, '') = '' THEN GETDATE() ELSE CAST(#{item.allocDate} AS DATETIME) END
			)
		</foreach>
			
	</insert>
		
	<insert id="insertOrderBuyAlloc" parameterType="java.util.HashMap">
		INSERT INTO
				T_ORDER_ALLOC
				(
					ALLOC_ID		, ORDER_ID		, SELL_CUST_ID	, SELL_DEPT_ID	, ALLOC_STATE		
				  , VEHIC_ID		, DRIVER_ID		, ALLOC_CHARGE	, CAR_NUM		, CAR_TON_CODE
				  , CAR_TYPE_CODE	, DRIVER_NAME	,	DRIVER_TEL	, REGDATE		, REGID
				  , ALLOC_DATE
				 )
		VALUES		
		<foreach collection="orderList" item="item" index="index" separator=",">
			(
				 	#{item.buyAllocId, jdbcType=NVARCHAR}
				  , #{item.orderId, jdbcType=NVARCHAR}
				  , #{loginCustId, jdbcType=NVARCHAR}
				  , #{loginDeptId, jdbcType=NVARCHAR}
				  , ISNULL(#{item.buyAllocState, jdbcType=NVARCHAR}, '00')
				  , #{item.vehicId, jdbcType=NVARCHAR}
				  , #{item.driverId, jdbcType=NVARCHAR}
				  , #{item.buyCharge, jdbcType=NVARCHAR}
				  , #{item.carNum, jdbcType=NVARCHAR}
				  , #{item.buyCarTonCode, jdbcType=NVARCHAR}
				  , #{item.buyCarTypeCode, jdbcType=NVARCHAR}
				  , #{item.driverName, jdbcType=NVARCHAR}
				  , #{item.driverTel, jdbcType=NVARCHAR}
				  , GETDATE()
				  , #{regId, jdbcType=NVARCHAR}
				  , CASE WHEN ISNULL(#{item.allocDate}, '') = '' AND #{item.buyAllocState, jdbcType=NVARCHAR} = '01' THEN GETDATE()
				     WHEN ISNULL(#{item.allocDate}, '') = '' THEN NULL ELSE CAST(#{item.allocDate} AS DATETIME) END
			)
		</foreach>
	</insert>	
	
	<insert id="insertCalc" parameterType="java.util.HashMap">
		INSERT INTO T_CALC 
				   (CALC_ID		, ALLOC_ID	, ORDER_ID		, CALC_TYPE_CODE, SELL_BUY_SCTN	,
					PAYABLE_AMT	, UNPAID_AMT, CALC_STATE	, MNG_CUST_ID 	, MNG_DEPT_ID	, 
					CUST_ID		, DEPT_ID	, VEHIC_ID		, DRIVER_ID		, REGDATE		, REGID)
		SELECT	
				'C' +  convert(varchar, getDate(), 112) + replace(convert(varchar, getDate(), 108), ':', '') + RIGHT('00' + CAST(NEXT VALUE FOR SEQ_CALC AS VARCHAR), 3)
			  , ALLOC_ID
			  , ORDER_ID
			  , '0002'
			  , B.CODE
			  , CASE WHEN B.CODE = '02' THEN ALLOC_CHARGE ELSE NULL END
			  , CASE WHEN B.CODE = '02' THEN NULL ELSE ALLOC_CHARGE END
			  , '00'
			  , CASE WHEN B.CODE = '02' THEN SELL_CUST_ID ELSE BUY_CUST_ID END
			  , CASE WHEN B.CODE = '02' THEN SELL_DEPT_ID ELSE BUY_DEPT_ID END
			  , CASE WHEN B.CODE = '02' THEN BUY_CUST_ID ELSE SELL_CUST_ID END
			  , CASE WHEN B.CODE = '02' THEN BUY_DEPT_ID ELSE SELL_DEPT_ID END
			  , VEHIC_ID
			  , DRIVER_ID
			  , GETDATE()
			  , 'SYSTEM'	
		FROM 
				(
					SELECT 
						 	'SELL_BUY_SCTN' AS GCODE, ALLOC_ID, ORDER_ID, ALLOC_CHARGE, SELL_CUST_ID
						   , SELL_DEPT_ID, BUY_CUST_ID, BUY_DEPT_ID, VEHIC_ID, DRIVER_ID
					FROM 
							T_ORDER_ALLOC
					WHERE
							ORDER_ID IN
							<foreach item="item" index="index" collection="calcOrderList" open="(" separator="," close=")">
								#{item}
							</foreach>
							AND ALLOC_ID NOT IN (SELECT ALLOC_ID 
									 			FROM T_CALC 
									 			WHERE 
											 		ORDER_ID IN 
													<foreach item="item" index="index" collection="calcOrderList" open="(" separator="," close=")">
														#{item}
													</foreach>
												 )
				) A
				INNER JOIN
			  	(
			  		SELECT 
			  				GCODE, CODE
			  		FROM
			  				T_CODE
			  		WHERE
			  				GCODE = 'SELL_BUY_SCTN' AND USE_YN = 'Y'	
			  	) B ON A.GCODE = B.GCODE
		WHERE
				B.CODE != '01' OR A.VEHIC_ID IS NULL
				
	</insert>
	
</mapper>