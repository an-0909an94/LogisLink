<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="userDataNS">	

	<select id="selectUserList" parameterType="java.util.HashMap" resultType="userVO">
		SELECT AA.*
		FROM (
			SELECT 
				ROW_NUMBER() OVER(ORDER BY AAA.REGDATE DESC) AS number
			  , AAA.*
			FROM (
				SELECT
					CUST_ID		custId,
					(SELECT BIZ_NAME FROM T_CUST_MST CM WHERE CM.CUST_ID = U.CUST_ID) bizName,
					DEPT_ID		deptId,
					(SELECT DEPT_NAME FROM T_CUST_DEPT CD WHERE CD.DEPT_ID = U.DEPT_ID) deptName,
					AUTH_SEQ	authSeq,
					(SELECT AUTH_NAME FROM T_AUTH A WHERE A.AUTH_SEQ = U.AUTH_SEQ) authName,
					USER_ID		userId,
					USER_NAME	userName,
					TELNUM		telNum,
					EMAIL		email,
					TALK_YN		talkYn,
					MOBILE		mobile,
					GRADE		grade,
					USE_YN		useYn,
					MEMO		memo,
					convert(varchar, REGDATE, 120)		regDate,
					REGID		regId,
					MASTER_YN	masterYn,
					LINK24_ID	link24Id,
					DOUZONE_ID  douzoneId
				FROM
					T_USER U
				<where>
					1=1
					<if test='useYn != null and !"".equals(useYn)'>
						AND USE_YN = #{useYn}
					</if>
					<if test='custId != null and !"".equals(custId)'>
						AND CUST_ID = #{custId}
					</if>
					<!-- 22.06.27 이건욱 T11 > J41 추가 -->
					<if test='searchUserValue != null and !searchUserValue.equals("")'>
						<if test='searchUserType == "userId"'>
							AND USER_ID LIKE '%' + #{searchUserValue} + '%'
						</if>
						<if test='searchUserType == "userName"'>
							AND USER_NAME LIKE '%' + #{searchUserValue} + '%'
						</if>
						<if test='searchUserType == "userMobile"'>
							AND MOBILE LIKE '%' + #{searchUserValue} + '%'
						</if>
					</if>
					<!-- End -->
					<if test='authSeq != null and !"".equals(authSeq)'>
						AND AUTH_SEQ = #{authSeq}
					</if>
					<if test='deptId != null and !"".equals(deptId)'>
						AND DEPT_ID = #{deptId}
					</if>
				</where>
				) AAA
			) AA
		WHERE number BETWEEN #{start} AND #{end}
		ORDER BY number ASC 
	</select>
	
	<select id="selectUserCnt" resultType="string" parameterType="java.util.HashMap">
		SELECT 
			COUNT(1) retCnt
		FROM
			T_USER U
		<where>
			1=1
			<if test='useYn != null and !"".equals(useYn)'>
				AND USE_YN = #{useYn}
			</if>
			<if test='custId != null and !"".equals(custId)'>
				AND CUST_ID = #{custId}
			</if>
			<if test='userId != null and !"".equals(userId)'>
				AND USER_ID LIKE '%' + #{userId} + '%'
			</if>
			<if test='authSeq != null and !"".equals(authSeq)'>
				AND AUTH_SEQ = #{authSeq}
			</if>
			<if test='deptId != null and !"".equals(deptId)'>
				AND DEPT_ID = #{deptId}
			</if>
		</where>
	</select>
	
	<select id="checkUserId" statementType="CALLABLE" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		{call CHECK_USER_ID(
						   	#{userId}
						  , #{retCode, mode=OUT, jdbcType=NVARCHAR, javaType=String}
						  ,	#{retMsg, mode=OUT, jdbcType=NVARCHAR, javaType=String})
		}
	</select>
	
	<insert id="insertUser" statementType="CALLABLE" parameterType="java.util.HashMap">
		{call INSERT_USER(
							#{custId}
						  , #{deptId}
						  , #{authSeq}
						  , #{userId}
						  , #{passwd}
						  , #{userName}
						  , #{telNum}
						  , #{email}
						  , #{talkYn}
						  , #{mobile}
						  , #{grade}
						  , #{masterYn}
						  , #{useYn}
						  , #{memo}
						  , #{regId}
						  , #{editId}
						  , #{link24Id}
						  , #{douzoneId}
						  , #{retCode, mode=OUT, jdbcType=NVARCHAR, javaType=String}
						  ,	#{retMsg, mode=OUT, jdbcType=NVARCHAR, javaType=String})
		}
	</insert>
	
	<select id="userNameList" parameterType="java.util.HashMap" resultType="userVO">
		SELECT USER_NAME userName
			 , USER_ID userId
			 , TELNUM
			 , MOBILE
			 , GRADE
		FROM T_USER
		WHERE USE_YN = 'Y'
		<!-- 22.06.23 이건욱 사용자 검색 시 deptId가 있으면 deptId로 검색 custId가 있으면 custId로 검색 -->
		<if test='custId != null and !"".equals(custId)'>
			AND CUST_ID = #{custId}
		</if>
		<if test='deptId != null and !"".equals(deptId)'>
			AND DEPT_ID = #{deptId}
		</if>
		<!-- End -->
	</select>
	
	<select id="getUserInfo" parameterType="java.util.HashMap" resultType="userVO">
		SELECT TOP 1
			ISNULL(U.CUST_ID,'')	custId,
			ISNULL(U.DEPT_ID,'')	deptId,
			ISNULL(U.USER_ID,'')	userId,
			ISNULL(U.USER_NAME, D.STAFF_NAME) userName,
			ISNULL(U.TELNUM,'')		telNum,
			ISNULL(U.EMAIL,'')		email,
			ISNULL(U.TALK_YN,'')	talkYn,
			ISNULL(U.MOBILE, D.MOBILE) mobile, 
			ISNULL(U.GRADE,'')		grade,
			ISNULL(U.USE_YN,'')		useYn,
			ISNULL(D.TAX_EMAIL,'') 	taxEmail,
			ISNULL(D.ITEM_CODE,'') 	itemCode,
			ISNULL(D.FAX,'') 		fax,
			ISNULL(D.CUST_MEMO,'')	custMemo,
			ISNULL(D.ORDER_MEMO,'') orderMemo
		FROM 
			T_CUST_DTL D
			LEFT OUTER JOIN T_USER U ON U.DEPT_ID = D.DEPT_ID 
		WHERE
				D.DEPT_ID = #{deptId}
			<if test='custId != null and !"".equals(custId)'>
				AND D.CUST_ID = #{custId}
			</if>
		ORDER BY D.REGDATE ASC
	</select>
	
	<select id="selectSendPushUserList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT
			U.USER_ID AS userId,
			U.MOBILE AS mobile,
			UA.PUSH_ID AS pushId,
			U.CUST_ID AS custId,
			U.DEPT_ID AS deptId
		FROM (
				SELECT
					U.CUST_ID,
					U.DEPT_ID,
					USER_ID,
					MOBILE
				FROM T_CUST_MST CM, T_USER U
				WHERE 
					CM.CUST_ID = U.CUST_ID AND U.USE_YN = 'Y' 
					<if test='sendList != null and sendList.size != 0'>
						AND CM.CUST_TYPE_CODE IN
						<foreach collection="sendList" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
					<if test='userIdList != null and userIdList.size != 0'>
						AND U.USER_ID IN
						<foreach collection="userIdList" item="item" index="index" separator="," open="(" close=")">
							#{item}
						</foreach>
					</if>
			) U, T_USER_APP UA
		WHERE U.USER_ID = UA.USER_ID AND UA.PUSH_YN = 'Y' AND UA.PUSH_ID IS NOT NULL
	</select>
	
	<select id="selectSendTalkUserList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT
			MIN(U.USER_ID) AS id,
			U.MOBILE AS mobile,
			MIN(U.USER_NAME) AS userName
		FROM (
				SELECT
					U.CUST_ID,
					U.DEPT_ID,
					USER_ID,
					USER_NAME,
					MOBILE
				FROM T_CUST_MST CM, T_USER U
				WHERE 
					CM.CUST_ID = U.CUST_ID AND U.USE_YN = 'Y' AND U.MOBILE LIKE '010%' AND U.TALK_YN = 'Y'
					<if test='sendList != null and sendList.size != 0'>
					AND CM.CUST_TYPE_CODE IN
					<foreach collection="sendList" item="item" index="index" separator="," open="(" close=")">
						#{item}
					</foreach>
					</if>
			) U
		GROUP BY U.MOBILE
	</select>
	
	<select id="omsSelectUserList" parameterType="java.util.HashMap" resultType="userVO">
	SELECT AA.*
	FROM (
		SELECT 
				ROW_NUMBER() OVER(ORDER BY REGDATE DESC) AS number
			  ,	A.*
		FROM (
			SELECT USER_ID 	 userId
				 , PASSWD 	 passWd
				 , USER_NAME userName
				 , TELNUM 	 telNum
				 , MOBILE 	 mobile
				 , EMAIL 	 email
				 , TALK_YN   talkYn
				 , GRADE 	 grade
				 , USE_YN 	 useYn
				 , REGDATE 	 regdate
				 , DEPT_ID	 deptId
			FROM T_USER
			WHERE CUST_ID = #{custId}
			<if test='deptList != null and !"".equals(deptList)'>
				AND DEPT_ID = #{deptList}
			</if>
			) A
		) AA
		WHERE number BETWEEN #{start} AND #{end}
		ORDER BY number ASC
	</select>
	
	<select id="omsSelectUserCnt" resultType="string" parameterType="java.util.HashMap">
		SELECT COUNT(1) retCnt
		FROM T_USER
		WHERE CUST_ID = #{custId}
		<if test='deptList != null and !"".equals(deptList)'>
			AND DEPT_ID = #{deptList}
		</if>
	</select>
	
	<update id="updateUserMainPage" parameterType="java.util.HashMap">
		UPDATE 
				T_USER
		SET
				USER_MAIN_PAGE = #{userMainPage}
		WHERE
				USER_ID = #{loginId}		
	</update>
	
	<select id="joinCheckUserId" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		IF EXISTS (
			SELECT USER_ID userId
			FROM T_USER
			WHERE USER_ID = REPLACE(#{userId},' ','')
		)
		BEGIN
			SELECT '99' AS retCode, '이미 존재하는 아이디입니다.' AS retMsg
		END
		ELSE 
		BEGIN 
			SELECT '00' AS retCode, '사용 가능한 아이디입니다.' AS retMsg
		END
	</select>
	
	<insert id="signUp" statementType="CALLABLE" parameterType="java.util.HashMap">
		{call SIGN_UP(
						#{custId}
					  , #{deptId}
					  , #{bizNum}
					  , #{userName}
					  , #{mobile}
					  , #{email}
					  , #{userId}
					  , #{passwd}
					  , #{authSeq}
					  , #{bizName}
					  , #{custTypeCode}
					  , #{bizCond}
					  , #{bizKind}
					  , #{bizTypeCode}
					  , #{ceo}
					  , #{bankCode}
					  , #{bankCnnm}
					  , #{bankAccount}
					  , #{deptName}
					  , #{retCode, mode=OUT, jdbcType=NVARCHAR, javaType=String}
					  ,	#{retMsg, mode=OUT, jdbcType=NVARCHAR, javaType=String})
		}
	</insert>
	
	<insert id="insertUserOption" statementType="CALLABLE" parameterType="java.util.HashMap">
		{call INSERT_USER_OPTION(
					 		#{loginId}
						  ,	#{loginCustId}
						  ,	#{loginDeptId}
						  ,	#{defaultReqCustId}
						  , #{defaultReqDeptId}
						  , #{defaultReqStaffId}
						  , #{defaultReqAddr}
						  , #{defaultReqAddrDetail}
						  , #{defaultReqTel}
						  , #{defaultReqMemo}
						  , #{defaultSSido}
						  , #{defaultSGungu}
						  , #{defaultSDong}
						  , #{defaultSLat}
						  , #{defaultSLon}
						  , #{defaultSComName}
						  , #{defaultSStaff}
						  , #{defaultSAddr}
						  , #{defaultSAddrDetail}
						  , #{defaultSTel}
						  , #{defaultSMemo}
						  , #{defaultCarTypeCode}
						  , #{defaultCarTonCode}
						  , #{defaultGoodsName}
						  , #{defaultGoodsWeight}
						  , #{defaultInOutSctn}
						  , #{defaultTruckTypeCode}
						  , #{defaultItemCode}
						  , #{defaultSWayCode}
						  , #{defaultEWayCode}
						  , #{defaultUnitPriceType}
						  , #{defaultUnitCharge}
						  , #{defaultSellCharge}
						  , #{defaultBuyCharge}
						  , #{defaultDriverMemo}
						  , #{retCode, mode=OUT, jdbcType=NVARCHAR, javaType=String}
						  ,	#{retMsg, mode=OUT, jdbcType=NVARCHAR, javaType=String})
		}
	</insert>
	
	<select id="getUserOption" parameterType="java.util.HashMap" resultType="userOptionVO">
		SELECT 	ISNULL(REQ_CUST_ID, '') 	defaultReqCustId
			  , ISNULL(REQ_DEPT_ID, '') 	defaultReqDeptId
			  , ISNULL(S_COM_NAME, '') 		defaultSComName
			  , ISNULL(S_SIDO, '')			defaultSSido
			  , ISNULL(S_GUNGU, '') 		defaultSGungu
			  , ISNULL(S_DONG, '') 			defaultSDong
			  , ISNULL(S_ADDR, '') 			defaultSAddr
			  , ISNULL(S_ADDR_DETAIL, '') 	defaultSAddrDetail
			  , ISNULL(S_STAFF, '') 		defaultSStaff
			  , ISNULL(S_TEL, '') 			defaultSTel
			  , ISNULL(S_MEMO, '') 			defaultSMemo
			  , S_LAT 			defaultSLat
			  , S_LON 			defaultSLon
			  , ISNULL(GOODS_NAME, '') 		defaultGoodsName
			  , GOODS_WEIGHT				defaultGoodsWeight
			  , ISNULL(S_WAY_CODE, '') 		defaultSWayCode
			  , ISNULL(E_WAY_CODE, '') 		defaultEWayCode
			  , ISNULL(CAR_TON_CODE, '') 	defaultCarTonCode
			  , ISNULL(CAR_TYPE_CODE, '') 	defaultCarTypeCode
			  , ISNULL(IN_OUT_SCTN, '') 	defaultInOutSctn
			  , ISNULL(TRUCK_TYPE_CODE, '') defaultTruckTypeCode
			  , ISNULL(REQ_MEMO, '') 		defaultReqMemo
			  , ISNULL(DRIVER_MEMO, '') 	defaultDriverMemo
			  , ISNULL(ITEM_CODE, '') 		defaultItemCode
			  , ISNULL(UNIT_PRICE_TYPE, '') defaultUnitPriceType
			  , UNIT_CHARGE 	defaultUnitCharge
			  , ISNULL(REQ_STAFF_ID, '') 	defaultReqStaffId
			  , ISNULL(REQ_TEL, '') 		defaultReqTel
			  , ISNULL(REQ_ADDR, '') 		defaultReqAddr
			  , ISNULL(REQ_ADDR_DETAIL, '') defaultReqAddrDetail
			  , SELL_CHARGE 	defaultSellCharge
			  , BUY_CHARGE 		defaultBuyCharge
			  , (SELECT USER_NAME FROM T_USER WHERE USER_ID = REQ_STAFF_ID)	defaultReqStaffName
			  , (SELECT DEPT_NAME FROM T_CUST_DEPT WHERE CUST_ID = REQ_CUST_ID AND DEPT_ID = REQ_DEPT_ID) defaultReqDeptName 
			  , (SELECT CUST_NAME FROM T_CUST_DTL WHERE CUST_ID = REQ_CUST_ID AND DEPT_ID = REQ_DEPT_ID AND MNG_CUST_ID = #{loginCustId} AND MNG_DEPT_ID = #{loginDeptId}) defaultReqCustName
			  , (SELECT PAY_TYPE FROM T_CUST_DTL WHERE CUST_ID = REQ_CUST_ID AND DEPT_ID = REQ_DEPT_ID AND MNG_CUST_ID = #{loginCustId} AND MNG_DEPT_ID = #{loginDeptId}) defaultReqCustPayType
		FROM T_USER_OPTION
		WHERE USER_ID = #{loginId}
   	</select>
   	
   	<insert id="omsInsertUserOption" statementType="CALLABLE" parameterType="java.util.HashMap">
		{call OMS_INSERT_USER_OPTION(
					 		#{loginId}
						  ,	#{loginCustId}
						  ,	#{loginDeptId}
						  ,	#{defaultBuyCustId}
						  , #{defaultBuyDeptId}
						  , #{defaultBuyStaffId}
						  , #{defaultReqMemo}
						  , #{defaultSSido}
						  , #{defaultSGungu}
						  , #{defaultSDong}
						  , #{defaultSLat}
						  , #{defaultSLon}
						  , #{defaultSComName}
						  , #{defaultSStaff}
						  , #{defaultSAddr}
						  , #{defaultSAddrDetail}
						  , #{defaultSTel}
						  , #{defaultSMemo}
						  , #{defaultCarTypeCode}
						  , #{defaultCarTonCode}
						  , #{defaultGoodsName}
						  , #{defaultGoodsWeight}
						  , #{defaultInOutSctn}
						  , #{defaultTruckTypeCode}
						  , #{defaultItemCode}
						  , #{defaultSWayCode}
						  , #{defaultEWayCode}
						  , #{defaultBuyCharge}
						  , #{defaultDriverMemo}
						  , #{retCode, mode=OUT, jdbcType=NVARCHAR, javaType=String}
						  ,	#{retMsg, mode=OUT, jdbcType=NVARCHAR, javaType=String})
		} 
	</insert>
	
	<select id="omsGetUserOption" parameterType="java.util.HashMap" resultType="userOptionVO">
		SELECT ISNULL(BUY_CUST_ID, '') 		defaultBuyCustId
			 , ISNULL(BUY_DEPT_ID, '') 		defaultBuyDeptId
			 , ISNULL(S_COM_NAME, '') 		defaultSComName
			 , ISNULL(S_SIDO, '') 			defaultSSido
			 , ISNULL(S_GUNGU, '') 			defaultSGungu
			 , ISNULL(S_DONG, '') 			defaultSDong
			 , ISNULL(S_ADDR, '') 			defaultSAddr
			 , ISNULL(S_ADDR_DETAIL, '') 	defaultSAddrDetail
			 , ISNULL(S_STAFF, '')			defaultSStaff
			 , ISNULL(S_TEL, '')			defaultSTel
			 , ISNULL(S_MEMO, '')			defaultSMemo
			 , S_LAT 						defaultSLat
			 , S_LON 						defaultSLon
			 , ISNULL(GOODS_NAME, '') 		defaultGoodsName
			 , GOODS_WEIGHT 				defaultGoodsWeight
			 , ISNULL(S_WAY_CODE, '') 		defaultSWayCode
			 , ISNULL(E_WAY_CODE, '') 		defaultEWayCode
			 , ISNULL(CAR_TON_CODE, '') 	defaultCarTonCode
			 , ISNULL(CAR_TYPE_CODE, '') 	defaultCarTypeCode
			 , ISNULL(IN_OUT_SCTN, '') 		defaultInOutSctn
			 , ISNULL(TRUCK_TYPE_CODE, '')  defaultTruckTypeCode
			 , ISNULL(REQ_MEMO, '') 		defaultReqMemo
			 , ISNULL(DRIVER_MEMO, '') 		defaultDriverMemo
			 , ISNULL(ITEM_CODE, '') 		defaultItemCode
			 , ISNULL(BUY_STAFF_ID, '') 	defaultBuyStaffId
			 , BUY_CHARGE 		defaultBuyCharge
			 , (SELECT USER_NAME FROM T_USER WHERE USER_ID = BUY_STAFF_ID)	defaultBuyStaffName
			 , (SELECT DEPT_NAME FROM T_CUST_DEPT WHERE CUST_ID = BUY_CUST_ID AND DEPT_ID = BUY_DEPT_ID) defaultBuyDeptName 
			 , (SELECT CUST_NAME FROM T_CUST_DTL WHERE CUST_ID = BUY_CUST_ID AND DEPT_ID = BUY_DEPT_ID AND MNG_CUST_ID = #{loginCustId} AND MNG_DEPT_ID = #{loginDeptId}) defaultBuyCustName
		FROM T_USER_OPTION
		WHERE USER_ID = #{loginId}
	</select>
   	
	<insert id="getUserData" statementType="CALLABLE" parameterType="java.util.HashMap">
		{call FIND_USER_INFO(
		 		#{userName}
			  ,	#{userPhone}
			  ,	#{userId}
			  ,	#{mode}
			  ,	#{passWord}
			  ,	#{shaPassWord}
			  , #{retCode, mode=OUT, jdbcType=NVARCHAR, javaType=String}
			  ,	#{retMsg, mode=OUT, jdbcType=NVARCHAR, javaType=String})
		} 
	</insert>

	<select id="getNiceDnbToken" parameterType="java.util.HashMap" resultType="string">
		SELECT K_VALUE
		FROM T_KEYGEN
		WHERE K_NAME = #{kName}
	</select>

	<update id="updateNiceDnbToken" parameterType="java.util.HashMap">
		UPDATE T_KEYGEN
		SET K_VALUE = #{kValue}, K_DATE=GETDATE(), EXPIRE= #{expire}
		WHERE K_NAME = #{kName}
	</update>
	<insert id="insertUserCargoAccount" parameterType="java.util.HashMap">
		MERGE INTO
		T_USER_LINKT T
		USING (
		<foreach collection="list" item="item" index="index" separator=" union ">
			SELECT
			#{item.userId}				AS USER_ID
			, #{item.linkCd}				AS LINK_CD
			, #{item.linkUserId}			AS LINK_USER_ID
			, #{item.linkPasswd}			AS LINK_PASSWD
			, #{item.useYN}				AS USE_YN
			, #{item.talkYN}				AS TALK_YN
			, #{item.memo}				AS MEMO
			, #{item.regId}				AS REGID
			, getdate()				AS REGDATE
			, #{item.editId}				AS EDITID
			, getdate()				AS EDITDATE

		</foreach>
		) AS S
		ON
		(T.USER_ID = S.USER_ID AND T.LINK_CD = S.LINK_CD)
		WHEN MATCHED THEN
		UPDATE SET
			T.LINK_USER_ID			= S.LINK_USER_ID
			, T.LINK_PASSWD			= S.LINK_PASSWD
			, T.USE_YN				= S.USE_YN
			, T.TALK_YN				= S.TALK_YN
			, T.MEMO				= S.MEMO
			, T.EDITID				= S.EDITID
			, T.EDITDATE			= S.EDITDATE
		WHEN NOT MATCHED THEN
		INSERT
		(
			USER_ID, LINK_CD, LINK_USER_ID, LINK_PASSWD, USE_YN, TALK_YN
			, MEMO, REGID, REGDATE, EDITID, EDITDATE
		)
		VALUES
		(
			S.USER_ID, S.LINK_CD, S.LINK_USER_ID, S.LINK_PASSWD, S.USE_YN ,S.TALK_YN
			, S.MEMO, S.REGID, S.REGDATE, '', ''
		);

	</insert>
</mapper>